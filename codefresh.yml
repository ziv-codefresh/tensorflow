# More examples of Codefresh YAML can be found at
# https://codefresh.io/docs/docs/yaml-examples/examples/

version: "1.0"
# Stages can help you organize your steps in stages
stages:
  - "clone"
  - "build"
  - "phase-1"
  - "phase-2"

steps:
  clone:
    title: "Cloning repository"
    type: "git-clone"
    repo: "ziv-codefresh/tensorflow"
    # CF_BRANCH value is auto set when pipeline is triggered
    # Learn more at codefresh.io/docs/docs/codefresh-yaml/variables/
    revision: "${{CF_BRANCH}}"
    stage: "clone"

  build:
    title: "Building Docker image"
    type: "build"
    image_name: "carsongee/tensorflow/component"
    working_directory: "${{clone}}/component"
    tag: "${{CF_BRANCH_TAG_NORMALIZED}}"
    dockerfile: "Dockerfile"
    stage: "build"

  lint:
    title: "Linter"
    image: "${{build}}" # The image in which command will be executed
    commands:
      - "pylint --rcfile /code/.pylintrc /code/component /code/tests"
  test:
    title: "Running Tests"
    image: "${{build}}" # The image in which command will be executed
    fail_fast: false
    commands:
      - "pytest -vvv -n 15 /code/tests/unit --alluredir=$CF_VOLUME_PATH/allure-results-unit"

  test_reporting_step:
    stage: "phase-1"
    title: Generate test reporting
    image: codefresh/cf-docker-test-reporting
    environment:
      - BUCKET_NAME=dr-codefresh-ci-reports
      - CF_STORAGE_INTEGRATION=dr-codefresh-ci-reports
      - ALLURE_DIR=allure-results-unit

  # evaluate_unit_tests:
  #   image: alpine:latest
  #   title: Checking Unit Test Result
  #   stage: "phase-1"
  #   commands:
  #   - echo "Unit tests failed, marking the whole pipeline as failed"
  #   - exit 1
  #   when:
  #     condition:
  #       all:
  #         myCondition: test.result == 'failure'

  # step_name:
  #   type: pending-approval
  #   stage: "phase-2"
  #   title: Start Phase 2
  #   description: Should we start phase 2 testing?
  #   timeout:
  #     duration: 48
  #     finalState: approved
  #     timeUnit: hours

  # TODO: Use dynamic pipelines instead. Use different test suite
  integration_test:
    title: "Running Tests"
    stage: "phase-2"
    image: "${{build}}" # The image in which command will be executed
    fail_fast: false
    commands:
      - "pytest -vvv -n 15 /code/tests/integration --alluredir=$CF_VOLUME_PATH/allure-results-integration"

  integration_test_report:
    title: Integration Test Report
    image: codefresh/cf-docker-test-reporting
    stage: "phase-2"
    environment:
      - BUCKET_NAME=dr-codefresh-ci-reports
      - CF_STORAGE_INTEGRATION=dr-codefresh-ci-reports
      - ALLURE_DIR=allure-results-integration

  evaluate_integration_test:
    image: alpine:latest
    title: Checking Integration Test Result
    stage: "phase-2"
    commands:
    - echo "Integration tests failed, marking the whole pipeline as failed"
    - exit 1
    when:
      condition:
        all:
          myCondition: integration_test.result == 'failure'
